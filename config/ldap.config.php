<?php

/** DO NOT EDIT THIS FILE DIRECTLY.
 * Move it to /config/autoload/ldap.config.php
 *
 * Also PLEASE make sure to move passwords and secure details to your
 * local.php that is not tracked in a git repository.  The file is left as is
 * in order to show a full list of options for the module.
 *
 */
return array(
    'zf2_ldap_config' => array(
        /** Directory where log files for LDAP login should be stored */
        'log_dir' => 'data/logs',
        /** if $_SERVER['HTTP_REFERRER'] is set then the user will be transfered
         * to the referrer location, if it is not set the user will transfer
         * to the default_location on successful authentication */
        'default_location' => "/",
        /* Would you like to use the callback function?  Almost everyone
         * would be doing this as it allows you to create a session for the
         * user as shown below, it also does not restrict you with what you
         * can and cannot do as we transfer the user data directly to you
         * so you may consume and use it as you wish.
         */
        'use_callback_function' => false,
        /* If the use_callback_function is set to true then the module will do an
         * additional lookup of the user in LDAP to get their ldap details.
         * The returned ldap details will then be pushed to the callback_class.
         *
         * Your callback_class must have a static function called setData($data)
         * There are no other requirements besides the setData function name and
         * the requirement of it being a static function.  What you do to the data
         * that is returned is up to you.  An example callback function to add
         * the user's ldap data to a session is displayed below.  If you would
         * like to use this example please be sure to create /module/Application/Model/SessionData.php
         * and add the following to it.  Then below for the callback class just add
         * 'callback_class' => '\Application\Model\SessionData',
         * <?php
          namespace Application\Model;
          class SessionData {

            public static function setData($data){
                $session = new \Zend\Session\Container('auth');
                $session->user = $data;
                $session->uid = $data->uid;
                // You can obviously do more stuff with the data here
                // Like injecting it into a db etc.
            }

            public static function destroyData(){
                $session = new \Zend\Session\Container('auth');
                $session->getManager()->destroy();
            }
          }
         */
        'callback_class' => '',
        /** You can add multiple servers here just increment the number
         * and it will do automatic failover as per the Zend LDAP setup.
         */
        /* The login/logout form & routes will be available by default at
         * /user/login & /user/logout, as specified below however you
         * may customize this below by specifying a different location for your
         * users to log in, as some of you may have User modules with pre-existing
         * routes for /user/
         */
        /*  Adding a link to log in should look like this in your view scripts:
          <a href="'.$this->url('ldap-login-route').'">Sign in</a> */
        'login_route' => '/user/login',
        /* Adding a link to log in should look like this in your view scripts:
         * <a href="'.$this->url('ldap-logout-route').'">Log out</a>
         */
        'logout_route' => '/user/logout',
        /* For documentation on what options you can use please visit Zend Documentation
         * as the zend_ldap_config section uses the configuration management as is.
         */
        'zend_ldap_config' => array(
            'server1' => array(
                'host' => '',
                'accountDomainNameShort' => '',
                'accountCanonicalForm' => '',
                'username' => '',
                'password' => '',
                'baseDn' => '',
                'bindRequiresDn' => TRUE,
                'useSsl' => TRUE,
                'port' => 636,
                'accountFilterFormat' => '(&(uid=%s))',
                'tryUsernameSplit' => TRUE,
            ),
        ),
    )
);
